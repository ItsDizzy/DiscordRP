buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.10"
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = getVersionString()
group = "me.paulhobbel.discordrp"
archivesBaseName = "DiscordRP-${mc_version}"

sourceCompatibility = targetCompatibility = '1.8'

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "${mcp_version}"

    replace '${version}', project.version

    replaceIn "DiscordRP.java"
}

dependencies {

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.api.output
    from sourceSets.api.allJava
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        System.getenv("SIGNING_STORE_PASS") != null
    }

    keyStore = "keystore.jks"
    alias = System.getenv("SIGNING_ALIAS")

    storePass = System.getenv("SIGNING_STORE_PASS")
    keyPass = System.getenv("SIGNING_KEY_PASS") != null ? System.getenv("SIGNING_KEY_PASS") : System.getenv("SIGNING_STORE_PASS")

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

curseforge {
    if (System.getenv("CF_APIKEY") != null)
        apiKey = System.getenv("CF_APIKEY")

    project {
        id = "296803"
        changelog = file("CHANGELOG.md")
        changelogType = "markdown"
        releaseType = 'beta'

        addArtifact sourcesJar
        addArtifact apiJar
    }
}

tasks.build.dependsOn apiJar, sourcesJar, signJar
tasks.curseforge.dependsOn build

String getVersionString() {
    def build_server = System.getenv("CI") != null || System.getenv("APPVEYOR_BUILD_NUMBER") != null

    def version_patch = project.version_patch
    if(System.getenv("APPVEYOR_BUILD_NUMBER") != null)
        version_patch = System.getenv("APPVEYOR_BUILD_NUMBER")

    def version_cls = ""
    if(System.getenv("VERSION_CLS"))
        version_cls = System.getenv("VERSION_CLS")

    def version_hash = ""
    if(!build_server) {
        version_cls = "local"
        version_hash = "git rev-parse --short HEAD".execute().text.trim()
    }

    def version_base = "${project.version_major}.${project.version_minor}.${version_patch}"
    def version_parts = ([version_base, version_cls, version_hash]).findAll { p -> p != "" }

    return String.join("-", version_parts)
}